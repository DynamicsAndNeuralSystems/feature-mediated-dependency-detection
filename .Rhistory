install.packages("rJava")
library("rJava")
.jinit()
# Change location of jar to match yours:
#  IMPORTANT -- If using the default below, make sure you have set the working directory
#   in R (e.g. with setwd()) to the location of this file (i.e. demos/r) !!
.jaddClassPath("/Users/arianguyen/featureBasedMeasurements_R/infodynamics.jar")
sourceArray<-sample(0:1, 100, replace=TRUE)
destArray<-c(0L, sourceArray[1:99]); # Need 0L to keep as integer array
sourceArray2<-sample(0:1, 100, replace=TRUE)
# Create a TE calculator and run it:
teCalc<-.jnew("infodynamics/measures/discrete/TransferEntropyCalculatorDiscrete", 2L, 1L)
.jcall(teCalc,"V","initialise") # V for void return value
.jcall(teCalc,"V","addObservations",sourceArray, destArray)
result1 <- .jcall(teCalc,"D","computeAverageLocalOfObservations")
cat("For copied source, result should be close to 1 bit : ", result1, "\n")
# Now look at the unrelated source:
.jcall(teCalc,"V","initialise") # V for void return value
.jcall(teCalc,"V","addObservations",sourceArray2, destArray)
result2 <- .jcall(teCalc,"D","computeAverageLocalOfObservations")
cat("For random source, result should be close to 0 bits: ", result2, "\n")
source <- c()
step_size <- 0.0005
freq_coefs_all <- c()
integrated_freqs <- c()
for (i in 1:BVF_number_segment){
if (i%%2 == 1){
freq_coefs <- seq(0.01,0.01+step_size*(segment_len-1),step_size)
} else {
freq_coefs <- seq(0.01+step_size*(segment_len-1),0.01,-1*step_size)
}
freq_coefs_all <- c(freq_coefs_all,freq_coefs)
if (i==1){
integrated_freqs[i] <- 0
} else {
integrated_freqs[i] <- integrated_freqs[i-1]+ (freq_coefs[i]+freq_coefs[i-1])/2
}
}
plot(freq_coefs_all,type="l",col="blue")
# Ben_varying_frequency
BVF_number_segment <- 20
# Generative processes
#ts_length <- 500
ts_length <- 5000
source <- c()
segment_len <- ts_length/BVF_number_segment
step_size <- 0.0005
freq_coefs_all <- c()
integrated_freqs <- c()
for (i in 1:BVF_number_segment){
if (i%%2 == 1){
freq_coefs <- seq(0.01,0.01+step_size*(segment_len-1),step_size)
} else {
freq_coefs <- seq(0.01+step_size*(segment_len-1),0.01,-1*step_size)
}
freq_coefs_all <- c(freq_coefs_all,freq_coefs)
if (i==1){
integrated_freqs[i] <- 0
} else {
integrated_freqs[i] <- integrated_freqs[i-1]+ (freq_coefs[i]+freq_coefs[i-1])/2
}
}
plot(freq_coefs_all,type="l",col="blue")
segment <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))+ noise_coef*rnorm(segment_len) + offset
BVF_number_segment
BVF_number_segment <- 5
ts_length <- 5000
BVF_number_segment <- 5
wave_step_size <- 1
source <- c()
segment_len <- ts_length/BVF_number_segment
step_size <- 0.0005
freq_coefs_all <- c()
integrated_freqs <- c()
for (i in 1:BVF_number_segment){
if (i%%2 == 1){
freq_coefs <- seq(0.01,0.01+step_size*(segment_len-1),step_size)
} else {
freq_coefs <- seq(0.01+step_size*(segment_len-1),0.01,-1*step_size)
}
freq_coefs_all <- c(freq_coefs_all,freq_coefs)
if (i==1){
integrated_freqs[i] <- 0
} else {
integrated_freqs[i] <- integrated_freqs[i-1]+ (freq_coefs[i]+freq_coefs[i-1])/2
}
}
plot(freq_coefs_all,type="l",col="blue")
segment <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))+ noise_coef*rnorm(segment_len) + offset
noise_coef <- 0
for (i in 1:BVF_number_segment){
if (i%%2 == 1){
freq_coefs <- seq(0.01,0.01+step_size*(segment_len-1),step_size)
} else {
freq_coefs <- seq(0.01+step_size*(segment_len-1),0.01,-1*step_size)
}
freq_coefs_all <- c(freq_coefs_all,freq_coefs)
if (i==1){
integrated_freqs[i] <- 0
} else {
integrated_freqs[i] <- integrated_freqs[i-1]+ (freq_coefs[i]+freq_coefs[i-1])/2
}
}
segment <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))+ noise_coef*rnorm(segment_len) + offset
x <- seq(0,(segment_len-1)*wave_step_size,wave_step_size)
length(integrated_freqs)
length(x)
freq_coefs_all <- c()
integrated_freqs <- c()
for (i in 1:BVF_number_segment){
if (i%%2 == 1){
freq_coefs <- seq(0.01,0.01+step_size*(segment_len-1),step_size)
} else {
freq_coefs <- seq(0.01+step_size*(segment_len-1),0.01,-1*step_size)
}
freq_coefs_all <- c(freq_coefs_all,freq_coefs)
for (j in seq(1,segment_len,1)){
if (j==1){
integrated_freqs[j] <- 0
} else {
integrated_freqs[j] <- integrated_freqs[j-1]+ (freq_coefs[j]+freq_coefs[j-1])/2
}
}
}
#plot(freq_coefs_all,type="l",col="blue")
segment <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))+ noise_coef*rnorm(segment_len) + offset
x <- seq(0,(segment_len-1)*wave_step_size,wave_step_size)
length(x)
length(integrated_freqs)
x <- seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs
#plot(freq_coefs_all,type="l",col="blue")
segment <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))+ noise_coef*rnorm(segment_len) + offset
cos(1)
cos(x)
cos(2*pi*x)
#plot(freq_coefs_all,type="l",col="blue")
segment <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))+ noise_coef*rnorm(segment_len) + offset
y <- x + integrated_freqs
y <- seq(0,(segment_len-1)*wave_step_size,wave_step_size) + integrated_freqs
cos(2*pi*y)
x <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))
length(x)
segment_len
offset
#plot(freq_coefs_all,type="l",col="blue")
segment <- cos(2*pi*(seq(0,(segment_len-1)*wave_step_size,wave_step_size)+integrated_freqs))+ noise_coef*rnorm(segment_len)
source <- c(source, segment)
plot(source, type="l",col="blue")
feature_window
J("java.lang.Runtime")$getRuntime()$gc()
random_results <- read.csv(paste0(here("results","simulation_studies"),"/random_process.csv"),header=T)
#-----------------------------------------
# Load all the packages necessary for the project
#-----------------------------------------
library(Rcatch22)
library(tidyr)
library(hash)
library(ggplot2)
library(dplyr)
library(rJava)
library(ggpubr)
library(gridExtra)
library(stringr)
library(RColorBrewer)
library(cowplot)
library(ggfittext)
library(plotly)
library(Rlab)
library(PearsonDS)
library(e1071)
library(gsl)
library(R.matlab)
library(htmlTable)
library(DT)
library(kableExtra)
library(corrplot)
library(reshape2)
library(here)
library(numDeriv)
library(pracma)
library(ggrepel)
library(viridis)
#-----------------------------------------
# Initialise JIDT
#-----------------------------------------
.jinit()
.jaddClassPath(here(here("infodynamics.jar")))
teCalc <-.jnew("infodynamics/measures/continuous/kraskov/TransferEntropyCalculatorKraskov")
.jinit()
.jaddClassPath(here(here("infodynamics.jar")))
teCalc <-.jnew("infodynamics/measures/continuous/kraskov/TransferEntropyCalculatorKraskov")
#-----------------------------------------
#Install required packages and set up
#-----------------------------------------
packages <- readLines("requirements.txt")
getwd()
setwd("/Users/arianguyen/Development/feature-based-dependency-detection/")
.jinit()
.jaddClassPath(here(here("infodynamics.jar")))
teCalc <-.jnew("infodynamics/measures/continuous/kraskov/TransferEntropyCalculatorKraskov")
packages <- readLines("requirements.txt")
# install required packages if they are not installed
for (p in packages) {
if (!requireNamespace(p, quietly = TRUE)) {
install.packages(p,repos = "http://cran.us.r-project.org")
}
}
source("setup.R")
getwd()
#-----------------------------------------
# Initialise JIDT
#-----------------------------------------
.jinit()
.jaddClassPath(here(here("infodynamics.jar")))
teCalc <-.jnew("infodynamics/measures/continuous/kraskov/TransferEntropyCalculatorKraskov")
random_results <- read.csv(paste0(here("results","simulation_studies"),"/random_process.csv"),header=T)
getwd()
library(here)
random_results <- read.csv(paste0(here("results","simulation_studies"),"/random_process.csv"),header=T)
random_results <- read.csv("/Users/arianguyen/Development/feature-based-dependency-detection/results/simulation_studies/random_process.csv",header=T)
random_results$driving_feature <- gsub(" ","",random_results$driving_feature)
random_results$capturing_feature <- gsub(" ","",random_results$capturing_feature)
random_results <- random_results[random_results$process=="random",]
ncol(random_results)
names(random_results)
unique(random_results$capturing_feature)
results2 <- read.csv("/Users/arianguyen/Development/feature-based-dependency-detection/results/simulation_studies/new_results.csv",header=T)
results2 <- unique(results2)
results2$seed <- as.integer(results2$seed)
results2$ts_length <- as.integer(results2$ts_length)
results2$driving_feature_timescale <- as.integer(results2$driving_feature_timescale)
results2$capturing_feature_timescale <- as.integer(results2$capturing_feature_timescale)
results2$linear_cor <- as.numeric(results2$linear_cor)
results2$TE <- as.numeric(results2$TE)
results2$pValue <- as.numeric(results2$pValue)
setdiff(unique(results2$capturing_feature), unique(random_results$capturing_feature))
setdiff(unique(random_results$capturing_feature),unique(results2$capturing_feature))
nrow(random_results)
nrow(results2)
y <- results2 %>% group_by(process,driving_feature,capturing_feature,ts_length,driving_feature_timescale,capturing_feature_timescale,linear_cor) %>%
summarise(number_seeds = n()) %>%
data.frame()
View(y)
results2 <- results2 %>%
group_by(seed, process, ts_length,
driving_feature, driving_feature_timescale,
capturing_feature, capturing_feature_timescale,
linear_cor, inference_type) %>%
slice(1) %>%   # keep the first row per group
ungroup()
nrow(results2)
y <- results2 %>% group_by(process,driving_feature,capturing_feature,ts_length,driving_feature_timescale,capturing_feature_timescale,linear_cor) %>%
summarise(number_seeds = n()) %>%
data.frame()
View(y)
names(random_results)
names(results2)
simulation_results <- rbind(random_results,result2)
nrow(simulation_results)
nrow(results2)
nrow(random_results)
head(simulation_results)
41850+171002
nrow(result2)
simulation_results <- rbind(random_results,results2)
nrow(simulation_results)
write.csv(simulation_results,file = "/Users/arianguyen/Development/feature-based-dependency-detection/results/simulation_studies/featureBasedDependency_simulation_results.csv", row.names = F)
source("setup.R")
source("src.R")
# function
process_results_summary <- function(data, summary_type,ts_length_filter, driving_feature_timescale_filter, capturing_feature_timescale_filter, linear_cor_filter) {
if (summary_type == "noise"){
filtered_data <- data %>%
filter(ts_length == ts_length_filter, driving_feature_timescale == driving_feature_timescale_filter, capturing_feature_timescale == capturing_feature_timescale_filter)
result_summary <- filtered_data %>%
group_by(process, ts_length, driving_feature, capturing_feature, noise_coef) %>%
summarise(avg_capture_rate_holm = mean(significant_pValue_holm) * 100) %>%
data.frame()
fipi_results <- filtered_data %>%
filter(!capturing_feature %in% c("null","signal","spike_count","autocorrelation_lag1","dominant_frequency")) %>%
group_by(process, ts_length, driving_feature, noise_coef, seed) %>%
summarise(fipi_detected = max(significant_pValue_holm)) %>%
group_by(process, ts_length, driving_feature, noise_coef) %>%
summarise(avg_capture_rate_holm = mean(fipi_detected) * 100) %>%
mutate(capturing_feature = "FIPI")
result_summary <- rbind.data.frame(fipi_results, result_summary)
return(result_summary)
}
if (summary_type == "driving_timescale"){
filtered_data <- data %>%
filter(ts_length == ts_length_filter, linear_cor == linear_cor_filter, capturing_feature_timescale == driving_feature_timescale)
result_summary <- filtered_data %>%
group_by(process, ts_length, driving_feature, capturing_feature, driving_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(significant_pValue_holm) * 100) %>%
data.frame()
fipi_results <- filtered_data %>%
filter(!capturing_feature %in% c("null","signal","spike_count","autocorrelation_lag1","dominant_frequency")) %>%
group_by(process, ts_length, driving_feature, driving_feature_timescale, seed) %>%
summarise(fipi_detected = max(significant_pValue_holm)) %>%
group_by(process, ts_length, driving_feature, driving_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(fipi_detected) * 100) %>%
mutate(capturing_feature = "FIPI")
result_summary <- rbind.data.frame(fipi_results, result_summary)
return(result_summary)
}
if (summary_type == "capturing_timescale"){
filtered_data <- data %>%
filter(ts_length == ts_length_filter, linear_cor == linear_cor_filter, driving_feature_timescale == driving_feature_timescale_filter)
result_summary <- filtered_data %>%
group_by(process, ts_length, driving_feature, capturing_feature, capturing_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(significant_pValue_holm) * 100) %>%
data.frame()
fipi_results <- filtered_data %>%
filter(!capturing_feature %in% c("null","signal","spike_count","autocorrelation_lag1","dominant_frequency")) %>%
group_by(process, ts_length, driving_feature, capturing_feature_timescale, seed) %>%
summarise(fipi_detected = max(significant_pValue_holm)) %>%
group_by(process, ts_length, driving_feature, capturing_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(fipi_detected) * 100) %>%
mutate(capturing_feature = "FIPI")
result_summary <- rbind.data.frame(fipi_results, result_summary)
return(result_summary)
}
}
process_results_summary <- function(data, summary_type,ts_length_filter, driving_feature_timescale_filter, capturing_feature_timescale_filter, linear_cor_filter) {
if (summary_type == "noise"){
filtered_data <- data %>%
filter(ts_length == ts_length_filter, driving_feature_timescale == driving_feature_timescale_filter, capturing_feature_timescale == capturing_feature_timescale_filter)
result_summary <- filtered_data %>%
group_by(process, ts_length, driving_feature, capturing_feature, noise_coef) %>%
summarise(avg_capture_rate_holm = mean(significant_pValue_holm) * 100) %>%
data.frame()
fipi_results <- filtered_data %>%
filter(!capturing_feature %in% c("null","signal","spike_count","autocorrelation_lag1","dominant_frequency")) %>%
group_by(process, ts_length, driving_feature, noise_coef, seed) %>%
summarise(fipi_detected = max(significant_pValue_holm)) %>%
group_by(process, ts_length, driving_feature, noise_coef) %>%
summarise(avg_capture_rate_holm = mean(fipi_detected) * 100) %>%
mutate(capturing_feature = "FIPI")
result_summary <- rbind.data.frame(fipi_results, result_summary)
return(result_summary)
}
if (summary_type == "driving_timescale"){
filtered_data <- data %>%
filter(ts_length == ts_length_filter, linear_cor == linear_cor_filter, capturing_feature_timescale == driving_feature_timescale)
result_summary <- filtered_data %>%
group_by(process, ts_length, driving_feature, capturing_feature, driving_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(significant_pValue_holm) * 100) %>%
data.frame()
fipi_results <- filtered_data %>%
filter(!capturing_feature %in% c("null","signal","spike_count","autocorrelation_lag1","dominant_frequency")) %>%
group_by(process, ts_length, driving_feature, driving_feature_timescale, seed) %>%
summarise(fipi_detected = max(significant_pValue_holm)) %>%
group_by(process, ts_length, driving_feature, driving_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(fipi_detected) * 100) %>%
mutate(capturing_feature = "FIPI")
result_summary <- rbind.data.frame(fipi_results, result_summary)
return(result_summary)
}
if (summary_type == "capturing_timescale"){
filtered_data <- data %>%
filter(ts_length == ts_length_filter, linear_cor == linear_cor_filter, driving_feature_timescale == driving_feature_timescale_filter)
result_summary <- filtered_data %>%
group_by(process, ts_length, driving_feature, capturing_feature, capturing_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(significant_pValue_holm) * 100) %>%
data.frame()
fipi_results <- filtered_data %>%
filter(!capturing_feature %in% c("null","signal","spike_count","autocorrelation_lag1","dominant_frequency")) %>%
group_by(process, ts_length, driving_feature, capturing_feature_timescale, seed) %>%
summarise(fipi_detected = max(significant_pValue_holm)) %>%
group_by(process, ts_length, driving_feature, capturing_feature_timescale) %>%
summarise(avg_capture_rate_holm = mean(fipi_detected) * 100) %>%
mutate(capturing_feature = "FIPI")
result_summary <- rbind.data.frame(fipi_results, result_summary)
return(result_summary)
}
}
## Read data
feature_name_mapping <- read.csv("../Feature_name_mapping.csv",header=T)
getwd()
setwd("/Users/arianguyen/Development/feature-mediated-dependency-detection/analyses/")
## Read data
feature_name_mapping <- read.csv("../Feature_name_mapping.csv",header=T)
color_map <- c("null" = "#808080", "signal" = "black",
"mean"="#56B4E9","std"="#0B5394",
"mode_5"="#D55E00","mode_10"="#9e4600",
"trev"="#58D6A7",
"acf_timescale"="#E69F00","periodicity"="#a2a848","centroid_freq"="#FFAA00",
"autocorrelation_lag1"="#DC97BD","spike_count"="#CC79A7","dominant_frequency"="#E261A9",
"FIPI"="#008a7d")
# process all results
simulation_results <- read.csv(paste0(here("results","simulation_studies"),"/featureBasedDependency_simulation_results.csv"),header=T)
getwd()
# process all results
results2 <- read.csv(paste0(here("results","simulation_studies"),"/new_results.csv"),header=T)
setwd("/Users/arianguyen/Development/feature-mediated-dependency-detection/analyses/")
# process all results
results2 <- read.csv(paste0(here("results","simulation_studies"),"/new_results.csv"),header=T)
here(0)
here()
setwd("/Users/arianguyen/Development/feature-mediated-dependency-detection")
getwd()
here()
?here
?here()
# process all results
results2 <- read.csv(paste0(here("results","simulation_studies"),"/new_results.csv"),header=T)
# process all results
simulation_results <- read.csv(paste0(here("results","simulation_studies"),"/featureBasedDependency_simulation_results.csv"),header=T)
# process all results
simulation_results <- read.csv(paste0(here("results","simulation_studies"),"/featureBasedDependency_simulation_results.csv"),header=T)
here(0)
here()
> # process all results
ls -a /Users/arianguyen/Development/feature-mediated-dependency-detection
getwd()
# process all results
results2 <- read.csv(paste0(here("results","simulation_studies"),"/new_results.csv"),header=T)
